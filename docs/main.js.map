{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/models/weather.ts","webpack:///./src/app/weather-view/weather-view.component.html","webpack:///./src/app/weather-view/weather-view.component.sass","webpack:///./src/app/weather-view/weather-view.component.ts","webpack:///./src/app/weather.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;ACZyC;AACc;AAEvD,IAAM,MAAM,GAAW,EAAE,CAAC;AAM1B;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;ACT7B,+H;;;;;;;;;;;ACAA,+DAA+D,+H;;;;;;;;;;;;;;;;;ACArB;AAQ1C;IALA;QAME,UAAK,GAAG,aAAa,CAAC;IAExB,CAAC;IAHY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CAGxB;IAAD,mBAAC;CAAA;AAHwB;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AAEe;AACT;AAE8B;AACA;AACxB;AACG;AAmBxD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAfrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,yFAAoB;aACrB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,oEAAgB;gBAChB,4FAAuB;gBACvB,oEAAa;gBACb,qEAAgB;aACjB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AC5BtB;AAAA;AAAA;IAAA;IAKA,CAAC;IAAD,cAAC;AAAD,CAAC;;;;;;;;;;;;;ACLD,oDAAoD,oBAAoB,2CAA2C,oBAAoB,uC;;;;;;;;;;;ACAvI,+DAA+D,+J;;;;;;;;;;;;;;;;;;;ACAK;AAChB;AAEO;AAQ3D;IAIE,8BAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAI,CAAC;IAEvD,uCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,0DAAG,CAAC,UAAC,OAAgB,IAAK,cAAO,CAAC,IAAI,EAAZ,CAAY,CAAC,EAAE,2EAAoB,EAAE,CAAC,CAAC;QACzH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,0DAAG,CAAC,UAAC,OAAgB,IAAK,cAAO,CAAC,IAAI,EAAZ,CAAY,CAAC,EAAE,2EAAoB,EAAE,CAAC,CAAC;IAG3H,CAAC;IAZU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;YAC5B,wHAA4C;;SAE7C,CAAC;+EAKoC,+DAAc;OAJvC,oBAAoB,CAehC;IAAD,2BAAC;CAAA;AAfgC;;;;;;;;;;;;;;;;;;;;;ACXU;AACO;AACP;AACQ;AAOnD;IASE,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAH5B,QAAG,GAA6B,IAAI,oDAAe,CAAC,IAAI,uDAAO,EAAE,CAAC,CAAC;QAC3D,gBAAW,GAAwB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAEnC,CAAC;IAElC,mCAAU,GAAjB;QAAA,iBAkBC;QAjBC,2CAA2C;QAC3C,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,2CAA2C;QAC3C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qDAAqD,GAAG,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,GAAG,yCAAyC,CAAC;aAC3I,SAAS,CAAE,UAAC,WAAgB;YAC3B,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;YAC7B,KAAI,CAAC,UAAU,GAAG,CAAC,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;YACxD,IAAM,WAAW,GAAW,WAAW,CAAC,IAAI,CAAC;YAE7C,KAAI,CAAC,OAAO,GAAG;gBACb,IAAI,EAAG,WAAW;gBAClB,IAAI,EAAE,KAAI,CAAC,UAAU;aACtB,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;YAC1B,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACT,CAAC;IAEM,oCAAW,GAAlB;QAAA,iBAOC;QANC,SAAS,CAAC,WAAW,CAAC,kBAAkB,CAAC,kBAAQ;YAC/C,KAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,kBAAkB;YAClE,KAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,kBAAkB;YACnE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAtCU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAU0B,+DAAU;OATzB,cAAc,CAuC1B;IAAD,qBAAC;CAAA;AAvC0B;;;;;;;;;;;;;ACV3B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<app-weather-view></app-weather-view>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'weather-bud';\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { WeatherViewComponent } from './weather-view/weather-view.component';\nimport {MatCardModule} from '@angular/material/card';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WeatherViewComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatCardModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Weather {\n    city: string;\n    temp: string;\n\n\n}\n","module.exports = \"<mat-card>\\n    <mat-card-title>{{weatherCity| async}}</mat-card-title>\\n    <mat-card-content>{{weatherTemp| async}} C</mat-card-content>\\n</mat-card>\\n\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3dlYXRoZXItdmlldy93ZWF0aGVyLXZpZXcuY29tcG9uZW50LnNhc3MifQ== */\"","import { Component, OnInit, AfterContentInit } from '@angular/core';\nimport { WeatherService } from '../weather.service';\nimport { Weather } from '../models/weather';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-weather-view',\n  templateUrl: './weather-view.component.html',\n  styleUrls: ['./weather-view.component.sass']\n})\nexport class WeatherViewComponent implements OnInit {\n  private weatherCity: Observable<string>;\n  private weatherTemp: Observable<string>;\n\n  constructor(private weatherService: WeatherService) { }\n\n  ngOnInit() {\n    this.weatherService.getLocation();\n    this.weatherCity = this.weatherService.weatherBsub.pipe(map((weather: Weather) => weather.city), distinctUntilChanged());\n    this.weatherTemp = this.weatherService.weatherBsub.pipe(map((weather: Weather) => weather.temp), distinctUntilChanged());\n\n\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Weather } from './models/weather';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n  private lat: string;\n  private lon: string;\n  private tempNumber: number;\n  private tempString: string;\n  private weather: Weather;\n  private asd: BehaviorSubject<Weather> = new BehaviorSubject(new Weather());\n  public readonly weatherBsub: Observable<Weather> = this.asd.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  public getWeather() {\n    // tslint:disable-next-line:max-line-length\n    console.log('lulwatÃ¤');\n    // tslint:disable-next-line:max-line-length\n    this.http.get('http://api.openweathermap.org/data/2.5/weather?lat=' + this.lat + '&lon=' + this.lon + '&appid=453382cec788339c262b0ffbf0ec4ff0')\n        .subscribe( (weatherData: any) => {\n          this.tempNumber = parseFloat(weatherData.main.temp);\n          console.log(this.tempNumber);\n          this.tempString = (this.tempNumber - 273.15).toString();\n          const weatherCity: string = weatherData.name;\n\n          this.weather = {\n            city : weatherCity,\n            temp: this.tempString\n          };\n          console.log(this.weather);\n          this.asd.next(this.weather);\n        });\n  }\n\n  public getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      this.lat = position.coords.latitude.toString(); // .split('.')[0];\n      this.lon = position.coords.longitude.toString(); // .split('.')[0];\n      console.log('asd');\n      this.getWeather();\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}